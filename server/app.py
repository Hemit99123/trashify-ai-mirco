import grpc
import main_pb2_grpc

"""
gRPC uses object-oriented programming (OOP) by requiring you to define a class 
(e.g., TrashifyAIService) that inherits from a base class generated from the .proto file. 
The base class, TrashifyServicer is generated by gRPC's Python tools from a universal proto file. This
allows for multi-language system design as they all only need a proto file to simply declare different 
types used by Proto Buffer (faster data tranmisssion like JSON) and the different RPC methods! Then gRPC simply
translates the code into the desired language!

By inheriting from the TrashifyServicer base class, you gain access to the different 
RPC methods defined within the service. In this case, GetNearestCoor is one such method.
You can then customize these methods use cases, for me: using them as an AI 
backend service with SciKit Learn APIs tooling.
"""

class TrashifyAIService(main_pb2_grpc.TrashifyServicer):
    def GetNearestCoor(self, request, context):
        return super().GetNearestCoor(request, context)

def serve():
    server = grpc.server()
    main_pb2_grpc.add_TrashifyServicer_to_server(TrashifyAIService(), server)
    server.add_insecure_port("localhost:50051")
    server.start()
    server.wait_for_termination()

if __name__ == "__main__":
    serve()
